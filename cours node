// node.js vd noeud

// npm init pour intialiser

// npm install pour installer

// pour lancer le serveur : 

// const express  = require("express")

// const app = express()
// const port = 4000;

// app.listen(port,function(){
//     console.log("Serveur start at localhost:" , port)
// })

// fonction callback est une fonction qu'on donne en paramètre à
// une autre fonction (exeple la function dans app.listen)
/*
la methode listen a 2 paramètres: le port et la function callback



SEQUILIZE permet de gérer les bases de données (ORM)
C'est le Doctrine de node.js
un pachage de node.js. Donc npm install sequelize
installation mariadb - npm install mariadb (connecteur entre sequelize et mariadb)

utilisation de sequilize:
récupérer sequeelize const {Sequelize} = require("sequelize");

NB: installer nodemon pour ne pas avoir à relancer le serveur à chaque fois

body: corps de la requete

pour hasher le mot de passe: npm install bcrypt

les étapes :

1- installer express et ajouetre route en post /user
2- installer sequelize et mariadb
3- créer le model user
4- synchroniser le tout
5- créer un user dans la base de données


token d'authentification preuve que l'utilisateur est bien connecté
céer route /login :
app.get("/login",async(req,res)=>{
    const User = sequelize.models.user;
    const token = null; //token d'authentification
    - récupérer mot de passe envoyé par le client
    - comparer le mot de passe envoyé par le client avec le mot de passe hashé dans la base de données
    - si le mot de passe est correct, on génère un token d'authentification

    1- récupérer le mot de passe envoyé par le client

    const password = req.body.password;

    2-récupérer le user dans la base de données

    const user = await User.findOne({where : {username: req.body.username}});

    3- compaaer le mot de passe envoyé par le client avec le mot de passe hashé dans la base de données

    if(password ok){
        res.status(200).json({message: "Vous êtes connecté",data:token})
        return
    }else{
        res.status(400).json({message: "Mot de passe incorrect",data:null})
    }

})

NB: attribut(properties) une varaible d'un objet.

*/